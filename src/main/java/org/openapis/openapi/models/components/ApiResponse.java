/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;


public class ApiResponse {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("code")
    private Integer code;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private String type;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("message")
    private String message;

    @JsonCreator
    public ApiResponse(
            @JsonProperty("code") @Nullable Integer code,
            @JsonProperty("type") @Nullable String type,
            @JsonProperty("message") @Nullable String message) {
        this.code = code;
        this.type = type;
        this.message = message;
    }
    
    public ApiResponse() {
        this(null, null, null);
    }

    public Optional<Integer> code() {
        return Optional.ofNullable(this.code);
    }

    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }

    public Optional<String> message() {
        return Optional.ofNullable(this.message);
    }

    public static Builder builder() {
        return new Builder();
    }


    public ApiResponse withCode(@Nullable Integer code) {
        this.code = code;
        return this;
    }


    public ApiResponse withType(@Nullable String type) {
        this.type = type;
        return this;
    }


    public ApiResponse withMessage(@Nullable String message) {
        this.message = message;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ApiResponse other = (ApiResponse) o;
        return 
            Utils.enhancedDeepEquals(this.code, other.code) &&
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.message, other.message);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            code, type, message);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ApiResponse.class,
                "code", code,
                "type", type,
                "message", message);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Integer code;

        private String type;

        private String message;

        private Builder() {
          // force use of static builder() method
        }

        public Builder code(@Nullable Integer code) {
            this.code = code;
            return this;
        }

        public Builder type(@Nullable String type) {
            this.type = type;
            return this;
        }

        public Builder message(@Nullable String message) {
            this.message = message;
            return this;
        }

        public ApiResponse build() {
            return new ApiResponse(
                code, type, message);
        }

    }
}
