/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;


public class Pet {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Long id;


    @JsonProperty("name")
    private String name;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("category")
    private Category category;


    @JsonProperty("photoUrls")
    private List<String> photoUrls;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    private List<Tag> tags;

    /**
     * pet status in the store
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private PetStatus status;

    @JsonCreator
    public Pet(
            @JsonProperty("id") @Nullable Long id,
            @JsonProperty("name") @Nonnull String name,
            @JsonProperty("category") @Nullable Category category,
            @JsonProperty("photoUrls") @Nonnull List<String> photoUrls,
            @JsonProperty("tags") @Nullable List<Tag> tags,
            @JsonProperty("status") @Nullable PetStatus status) {
        this.id = id;
        this.name = Optional.ofNullable(name)
            .orElseThrow(() -> new IllegalArgumentException("name cannot be null"));
        this.category = category;
        this.photoUrls = Optional.ofNullable(photoUrls)
            .orElseThrow(() -> new IllegalArgumentException("photoUrls cannot be null"));
        this.tags = tags;
        this.status = status;
    }
    
    public Pet(
            @Nonnull String name,
            @Nonnull List<String> photoUrls) {
        this(null, name, null,
            photoUrls, null, null);
    }

    public Optional<Long> id() {
        return Optional.ofNullable(this.id);
    }

    public String name() {
        return this.name;
    }

    public Optional<Category> category() {
        return Optional.ofNullable(this.category);
    }

    public List<String> photoUrls() {
        return this.photoUrls;
    }

    public Optional<List<Tag>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * pet status in the store
     */
    public Optional<PetStatus> status() {
        return Optional.ofNullable(this.status);
    }

    public static Builder builder() {
        return new Builder();
    }


    public Pet withId(@Nullable Long id) {
        this.id = id;
        return this;
    }


    public Pet withName(@Nonnull String name) {
        this.name = Utils.checkNotNull(name, "name");
        return this;
    }


    public Pet withCategory(@Nullable Category category) {
        this.category = category;
        return this;
    }


    public Pet withPhotoUrls(@Nonnull List<String> photoUrls) {
        this.photoUrls = Utils.checkNotNull(photoUrls, "photoUrls");
        return this;
    }


    public Pet withTags(@Nullable List<Tag> tags) {
        this.tags = tags;
        return this;
    }


    /**
     * pet status in the store
     */
    public Pet withStatus(@Nullable PetStatus status) {
        this.status = status;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Pet other = (Pet) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.category, other.category) &&
            Utils.enhancedDeepEquals(this.photoUrls, other.photoUrls) &&
            Utils.enhancedDeepEquals(this.tags, other.tags) &&
            Utils.enhancedDeepEquals(this.status, other.status);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, name, category,
            photoUrls, tags, status);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Pet.class,
                "id", id,
                "name", name,
                "category", category,
                "photoUrls", photoUrls,
                "tags", tags,
                "status", status);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Long id;

        private String name;

        private Category category;

        private List<String> photoUrls;

        private List<Tag> tags;

        private PetStatus status;

        private Builder() {
          // force use of static builder() method
        }

        public Builder id(@Nullable Long id) {
            this.id = id;
            return this;
        }

        public Builder name(@Nonnull String name) {
            this.name = Utils.checkNotNull(name, "name");
            return this;
        }

        public Builder category(@Nullable Category category) {
            this.category = category;
            return this;
        }

        public Builder photoUrls(@Nonnull List<String> photoUrls) {
            this.photoUrls = Utils.checkNotNull(photoUrls, "photoUrls");
            return this;
        }

        public Builder tags(@Nullable List<Tag> tags) {
            this.tags = tags;
            return this;
        }

        /**
         * pet status in the store
         */
        public Builder status(@Nullable PetStatus status) {
            this.status = status;
            return this;
        }

        public Pet build() {
            return new Pet(
                id, name, category,
                photoUrls, tags, status);
        }

    }
}
