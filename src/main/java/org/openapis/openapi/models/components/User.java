/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;


public class User {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Long id;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("username")
    private String username;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("firstName")
    private String firstName;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastName")
    private String lastName;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email")
    private String email;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("password")
    private String password;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone")
    private String phone;

    /**
     * User Status
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userStatus")
    private Integer userStatus;

    @JsonCreator
    public User(
            @JsonProperty("id") @Nullable Long id,
            @JsonProperty("username") @Nullable String username,
            @JsonProperty("firstName") @Nullable String firstName,
            @JsonProperty("lastName") @Nullable String lastName,
            @JsonProperty("email") @Nullable String email,
            @JsonProperty("password") @Nullable String password,
            @JsonProperty("phone") @Nullable String phone,
            @JsonProperty("userStatus") @Nullable Integer userStatus) {
        this.id = id;
        this.username = username;
        this.firstName = firstName;
        this.lastName = lastName;
        this.email = email;
        this.password = password;
        this.phone = phone;
        this.userStatus = userStatus;
    }
    
    public User() {
        this(null, null, null,
            null, null, null,
            null, null);
    }

    public Optional<Long> id() {
        return Optional.ofNullable(this.id);
    }

    public Optional<String> username() {
        return Optional.ofNullable(this.username);
    }

    public Optional<String> firstName() {
        return Optional.ofNullable(this.firstName);
    }

    public Optional<String> lastName() {
        return Optional.ofNullable(this.lastName);
    }

    public Optional<String> email() {
        return Optional.ofNullable(this.email);
    }

    public Optional<String> password() {
        return Optional.ofNullable(this.password);
    }

    public Optional<String> phone() {
        return Optional.ofNullable(this.phone);
    }

    /**
     * User Status
     */
    public Optional<Integer> userStatus() {
        return Optional.ofNullable(this.userStatus);
    }

    public static Builder builder() {
        return new Builder();
    }


    public User withId(@Nullable Long id) {
        this.id = id;
        return this;
    }


    public User withUsername(@Nullable String username) {
        this.username = username;
        return this;
    }


    public User withFirstName(@Nullable String firstName) {
        this.firstName = firstName;
        return this;
    }


    public User withLastName(@Nullable String lastName) {
        this.lastName = lastName;
        return this;
    }


    public User withEmail(@Nullable String email) {
        this.email = email;
        return this;
    }


    public User withPassword(@Nullable String password) {
        this.password = password;
        return this;
    }


    public User withPhone(@Nullable String phone) {
        this.phone = phone;
        return this;
    }


    /**
     * User Status
     */
    public User withUserStatus(@Nullable Integer userStatus) {
        this.userStatus = userStatus;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        User other = (User) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.username, other.username) &&
            Utils.enhancedDeepEquals(this.firstName, other.firstName) &&
            Utils.enhancedDeepEquals(this.lastName, other.lastName) &&
            Utils.enhancedDeepEquals(this.email, other.email) &&
            Utils.enhancedDeepEquals(this.password, other.password) &&
            Utils.enhancedDeepEquals(this.phone, other.phone) &&
            Utils.enhancedDeepEquals(this.userStatus, other.userStatus);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, username, firstName,
            lastName, email, password,
            phone, userStatus);
    }
    
    @Override
    public String toString() {
        return Utils.toString(User.class,
                "id", id,
                "username", username,
                "firstName", firstName,
                "lastName", lastName,
                "email", email,
                "password", password,
                "phone", phone,
                "userStatus", userStatus);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Long id;

        private String username;

        private String firstName;

        private String lastName;

        private String email;

        private String password;

        private String phone;

        private Integer userStatus;

        private Builder() {
          // force use of static builder() method
        }

        public Builder id(@Nullable Long id) {
            this.id = id;
            return this;
        }

        public Builder username(@Nullable String username) {
            this.username = username;
            return this;
        }

        public Builder firstName(@Nullable String firstName) {
            this.firstName = firstName;
            return this;
        }

        public Builder lastName(@Nullable String lastName) {
            this.lastName = lastName;
            return this;
        }

        public Builder email(@Nullable String email) {
            this.email = email;
            return this;
        }

        public Builder password(@Nullable String password) {
            this.password = password;
            return this;
        }

        public Builder phone(@Nullable String phone) {
            this.phone = phone;
            return this;
        }

        /**
         * User Status
         */
        public Builder userStatus(@Nullable Integer userStatus) {
            this.userStatus = userStatus;
            return this;
        }

        public User build() {
            return new User(
                id, username, firstName,
                lastName, email, password,
                phone, userStatus);
        }

    }
}
