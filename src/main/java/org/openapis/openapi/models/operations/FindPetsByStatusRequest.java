/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.core.type.TypeReference;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapis.openapi.utils.LazySingletonValue;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class FindPetsByStatusRequest {
    /**
     * Status values that need to be considered for filter
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=status")
    private Status status;

    @JsonCreator
    public FindPetsByStatusRequest(
            @Nullable Status status) {
        this.status = Optional.ofNullable(status)
            .orElse(Builder._SINGLETON_VALUE_Status.value());
    }
    
    public FindPetsByStatusRequest() {
        this(null);
    }

    /**
     * Status values that need to be considered for filter
     */
    public Optional<Status> status() {
        return Optional.ofNullable(this.status);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Status values that need to be considered for filter
     */
    public FindPetsByStatusRequest withStatus(@Nullable Status status) {
        this.status = status;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FindPetsByStatusRequest other = (FindPetsByStatusRequest) o;
        return 
            Utils.enhancedDeepEquals(this.status, other.status);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            status);
    }
    
    @Override
    public String toString() {
        return Utils.toString(FindPetsByStatusRequest.class,
                "status", status);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Status status;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * Status values that need to be considered for filter
         */
        public Builder status(@Nullable Status status) {
            this.status = status;
            return this;
        }

        public FindPetsByStatusRequest build() {
            return new FindPetsByStatusRequest(
                status);
        }


        private static final LazySingletonValue<Status> _SINGLETON_VALUE_Status =
                new LazySingletonValue<>(
                        "status",
                        "\"available\"",
                        new TypeReference<Status>() {});
    }
}
