/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class LoginUserRequest {
    /**
     * The user name for login
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=username")
    private String username;

    /**
     * The password for login in clear text
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=password")
    private String password;

    @JsonCreator
    public LoginUserRequest(
            @Nullable String username,
            @Nullable String password) {
        this.username = username;
        this.password = password;
    }
    
    public LoginUserRequest() {
        this(null, null);
    }

    /**
     * The user name for login
     */
    public Optional<String> username() {
        return Optional.ofNullable(this.username);
    }

    /**
     * The password for login in clear text
     */
    public Optional<String> password() {
        return Optional.ofNullable(this.password);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The user name for login
     */
    public LoginUserRequest withUsername(@Nullable String username) {
        this.username = username;
        return this;
    }


    /**
     * The password for login in clear text
     */
    public LoginUserRequest withPassword(@Nullable String password) {
        this.password = password;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        LoginUserRequest other = (LoginUserRequest) o;
        return 
            Utils.enhancedDeepEquals(this.username, other.username) &&
            Utils.enhancedDeepEquals(this.password, other.password);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            username, password);
    }
    
    @Override
    public String toString() {
        return Utils.toString(LoginUserRequest.class,
                "username", username,
                "password", password);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String username;

        private String password;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * The user name for login
         */
        public Builder username(@Nullable String username) {
            this.username = username;
            return this;
        }

        /**
         * The password for login in clear text
         */
        public Builder password(@Nullable String password) {
            this.password = password;
            return this;
        }

        public LoginUserRequest build() {
            return new LoginUserRequest(
                username, password);
        }

    }
}
