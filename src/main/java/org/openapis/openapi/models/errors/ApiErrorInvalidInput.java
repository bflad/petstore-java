/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.errors;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.io.InputStream;
import java.lang.Override;
import java.lang.RuntimeException;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.net.http.HttpResponse;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;

/**
 * ApiErrorInvalidInput
 * 
 * <p>Not Found error
 */
@SuppressWarnings("serial")
public class ApiErrorInvalidInput extends RuntimeException {

    @JsonProperty("status")
    private int status;


    @JsonProperty("error")
    private String error;

    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("RawResponse")
    private HttpResponse<InputStream> rawResponse;

    @JsonCreator
    public ApiErrorInvalidInput(
            @JsonProperty("status") int status,
            @JsonProperty("error") @Nonnull String error,
            @JsonProperty("RawResponse") @Nullable HttpResponse<InputStream> rawResponse) {
        super("API error occurred");
        this.status = status;
        this.error = Optional.ofNullable(error)
            .orElseThrow(() -> new IllegalArgumentException("error cannot be null"));
        this.rawResponse = rawResponse;
    }
    
    public ApiErrorInvalidInput(
            int status,
            @Nonnull String error) {
        this(status, error, null);
    }

    public int status() {
        return this.status;
    }

    public String error() {
        return this.error;
    }

    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    public Optional<HttpResponse<InputStream>> rawResponse() {
        return Optional.ofNullable(this.rawResponse);
    }

    public static Builder builder() {
        return new Builder();
    }


    public ApiErrorInvalidInput withStatus(int status) {
        this.status = status;
        return this;
    }


    public ApiErrorInvalidInput withError(@Nonnull String error) {
        this.error = Utils.checkNotNull(error, "error");
        return this;
    }


    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    public ApiErrorInvalidInput withRawResponse(@Nullable HttpResponse<InputStream> rawResponse) {
        this.rawResponse = rawResponse;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ApiErrorInvalidInput other = (ApiErrorInvalidInput) o;
        return 
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.error, other.error) &&
            Utils.enhancedDeepEquals(this.rawResponse, other.rawResponse);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            status, error, rawResponse);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ApiErrorInvalidInput.class,
                "status", status,
                "error", error,
                "rawResponse", rawResponse);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private int status;

        private String error;

        private HttpResponse<InputStream> rawResponse;

        private Builder() {
          // force use of static builder() method
        }

        public Builder status(int status) {
            this.status = status;
            return this;
        }

        public Builder error(@Nonnull String error) {
            this.error = Utils.checkNotNull(error, "error");
            return this;
        }

        /**
         * Raw HTTP response; suitable for custom response parsing
         */
        public Builder rawResponse(@Nullable HttpResponse<InputStream> rawResponse) {
            this.rawResponse = rawResponse;
            return this;
        }

        public ApiErrorInvalidInput build() {
            return new ApiErrorInvalidInput(
                status, error, rawResponse);
        }

    }
}

