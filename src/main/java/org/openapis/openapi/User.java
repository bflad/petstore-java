/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi;

import static org.openapis.openapi.operations.Operations.RequestOperation;
import static org.openapis.openapi.operations.Operations.RequestlessOperation;

import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Exception;
import java.lang.String;
import java.util.List;
import org.openapis.openapi.models.operations.CreateUserRequestBuilder;
import org.openapis.openapi.models.operations.CreateUserResponse;
import org.openapis.openapi.models.operations.CreateUsersWithListInputRequestBuilder;
import org.openapis.openapi.models.operations.CreateUsersWithListInputResponse;
import org.openapis.openapi.models.operations.DeleteUserRequest;
import org.openapis.openapi.models.operations.DeleteUserRequestBuilder;
import org.openapis.openapi.models.operations.DeleteUserResponse;
import org.openapis.openapi.models.operations.GetUserByNameRequest;
import org.openapis.openapi.models.operations.GetUserByNameRequestBuilder;
import org.openapis.openapi.models.operations.GetUserByNameResponse;
import org.openapis.openapi.models.operations.LoginUserRequest;
import org.openapis.openapi.models.operations.LoginUserRequestBuilder;
import org.openapis.openapi.models.operations.LoginUserResponse;
import org.openapis.openapi.models.operations.LogoutUserRequestBuilder;
import org.openapis.openapi.models.operations.LogoutUserResponse;
import org.openapis.openapi.models.operations.UpdateUserRequest;
import org.openapis.openapi.models.operations.UpdateUserRequestBuilder;
import org.openapis.openapi.models.operations.UpdateUserResponse;
import org.openapis.openapi.operations.CreateUser;
import org.openapis.openapi.operations.CreateUsersWithListInput;
import org.openapis.openapi.operations.DeleteUser;
import org.openapis.openapi.operations.GetUserByName;
import org.openapis.openapi.operations.LoginUser;
import org.openapis.openapi.operations.LogoutUser;
import org.openapis.openapi.operations.UpdateUser;

/**
 * Operations about user
 */
public class User {
    private final SDKConfiguration sdkConfiguration;

    User(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * Create user
     * 
     * <p>This can only be done by the logged in user.
     * 
     * @return The call builder
     */
    public CreateUserRequestBuilder createUser() {
        return new CreateUserRequestBuilder(sdkConfiguration);
    }

    /**
     * Create user
     * 
     * <p>This can only be done by the logged in user.
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateUserResponse createUserDirect() throws Exception {
        return createUser(null);
    }

    /**
     * Create user
     * 
     * <p>This can only be done by the logged in user.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateUserResponse createUser(@Nullable org.openapis.openapi.models.components.User request) throws Exception {
        RequestOperation<org.openapis.openapi.models.components.User, CreateUserResponse> operation
              = new CreateUser.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Creates list of users with given input array
     * 
     * <p>Creates list of users with given input array
     * 
     * @return The call builder
     */
    public CreateUsersWithListInputRequestBuilder createUsersWithListInput() {
        return new CreateUsersWithListInputRequestBuilder(sdkConfiguration);
    }

    /**
     * Creates list of users with given input array
     * 
     * <p>Creates list of users with given input array
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateUsersWithListInputResponse createUsersWithListInputDirect() throws Exception {
        return createUsersWithListInput(null);
    }

    /**
     * Creates list of users with given input array
     * 
     * <p>Creates list of users with given input array
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateUsersWithListInputResponse createUsersWithListInput(@Nullable List<org.openapis.openapi.models.components.User> request) throws Exception {
        RequestOperation<List<org.openapis.openapi.models.components.User>, CreateUsersWithListInputResponse> operation
              = new CreateUsersWithListInput.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Logs user into the system
     * 
     * @return The call builder
     */
    public LoginUserRequestBuilder loginUser() {
        return new LoginUserRequestBuilder(sdkConfiguration);
    }

    /**
     * Logs user into the system
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public LoginUserResponse loginUserDirect() throws Exception {
        return loginUser(null, null);
    }

    /**
     * Logs user into the system
     * 
     * @param username The user name for login
     * @param password The password for login in clear text
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public LoginUserResponse loginUser(@Nullable String username, @Nullable String password) throws Exception {
        LoginUserRequest request = new LoginUserRequest(username, password);
        RequestOperation<LoginUserRequest, LoginUserResponse> operation
              = new LoginUser.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Logs out current logged in user session
     * 
     * @return The call builder
     */
    public LogoutUserRequestBuilder logoutUser() {
        return new LogoutUserRequestBuilder(sdkConfiguration);
    }

    /**
     * Logs out current logged in user session
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public LogoutUserResponse logoutUserDirect() throws Exception {
        RequestlessOperation<LogoutUserResponse> operation
            = new LogoutUser.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest());
    }

    /**
     * Get user by user name
     * 
     * @return The call builder
     */
    public GetUserByNameRequestBuilder getUserByName() {
        return new GetUserByNameRequestBuilder(sdkConfiguration);
    }

    /**
     * Get user by user name
     * 
     * @param username The name that needs to be fetched. Use user1 for testing. 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetUserByNameResponse getUserByName(@Nonnull String username) throws Exception {
        GetUserByNameRequest request = new GetUserByNameRequest(username);
        RequestOperation<GetUserByNameRequest, GetUserByNameResponse> operation
              = new GetUserByName.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update user
     * 
     * <p>This can only be done by the logged in user.
     * 
     * @return The call builder
     */
    public UpdateUserRequestBuilder updateUser() {
        return new UpdateUserRequestBuilder(sdkConfiguration);
    }

    /**
     * Update user
     * 
     * <p>This can only be done by the logged in user.
     * 
     * @param username name that needs to be updated
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateUserResponse updateUser(@Nonnull String username) throws Exception {
        return updateUser(username, null);
    }

    /**
     * Update user
     * 
     * <p>This can only be done by the logged in user.
     * 
     * @param username name that needs to be updated
     * @param user 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateUserResponse updateUser(@Nonnull String username, @Nullable org.openapis.openapi.models.components.User user) throws Exception {
        UpdateUserRequest request = new UpdateUserRequest(username, user);
        RequestOperation<UpdateUserRequest, UpdateUserResponse> operation
              = new UpdateUser.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Delete user
     * 
     * <p>This can only be done by the logged in user.
     * 
     * @return The call builder
     */
    public DeleteUserRequestBuilder deleteUser() {
        return new DeleteUserRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete user
     * 
     * <p>This can only be done by the logged in user.
     * 
     * @param username The name that needs to be deleted
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteUserResponse deleteUser(@Nonnull String username) throws Exception {
        DeleteUserRequest request = new DeleteUserRequest(username);
        RequestOperation<DeleteUserRequest, DeleteUserResponse> operation
              = new DeleteUser.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

}
