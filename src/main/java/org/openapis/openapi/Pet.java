/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi;

import static org.openapis.openapi.operations.Operations.RequestOperation;

import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Exception;
import java.lang.String;
import java.util.List;
import org.openapis.openapi.models.operations.AddPetRequestBuilder;
import org.openapis.openapi.models.operations.AddPetResponse;
import org.openapis.openapi.models.operations.DeletePetRequest;
import org.openapis.openapi.models.operations.DeletePetRequestBuilder;
import org.openapis.openapi.models.operations.DeletePetResponse;
import org.openapis.openapi.models.operations.FindPetsByStatusRequest;
import org.openapis.openapi.models.operations.FindPetsByStatusRequestBuilder;
import org.openapis.openapi.models.operations.FindPetsByStatusResponse;
import org.openapis.openapi.models.operations.FindPetsByTagsRequest;
import org.openapis.openapi.models.operations.FindPetsByTagsRequestBuilder;
import org.openapis.openapi.models.operations.FindPetsByTagsResponse;
import org.openapis.openapi.models.operations.GetPetByIdRequest;
import org.openapis.openapi.models.operations.GetPetByIdRequestBuilder;
import org.openapis.openapi.models.operations.GetPetByIdResponse;
import org.openapis.openapi.models.operations.Status;
import org.openapis.openapi.models.operations.UpdatePetRequestBuilder;
import org.openapis.openapi.models.operations.UpdatePetResponse;
import org.openapis.openapi.models.operations.UploadFileRequest;
import org.openapis.openapi.models.operations.UploadFileRequestBuilder;
import org.openapis.openapi.models.operations.UploadFileResponse;
import org.openapis.openapi.operations.AddPet;
import org.openapis.openapi.operations.DeletePet;
import org.openapis.openapi.operations.FindPetsByStatus;
import org.openapis.openapi.operations.FindPetsByTags;
import org.openapis.openapi.operations.GetPetById;
import org.openapis.openapi.operations.UpdatePet;
import org.openapis.openapi.operations.UploadFile;

/**
 * Everything about your Pets
 * 
 * <p>http://swagger.io - Find out more
 */
public class Pet {
    private final SDKConfiguration sdkConfiguration;

    Pet(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * Update an existing pet
     * 
     * <p>Update an existing pet by Id
     * 
     * @return The call builder
     */
    public UpdatePetRequestBuilder updatePet() {
        return new UpdatePetRequestBuilder(sdkConfiguration);
    }

    /**
     * Update an existing pet
     * 
     * <p>Update an existing pet by Id
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdatePetResponse updatePet(@Nonnull org.openapis.openapi.models.components.Pet request) throws Exception {
        RequestOperation<org.openapis.openapi.models.components.Pet, UpdatePetResponse> operation
              = new UpdatePet.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Add a new pet to the store
     * 
     * <p>Add a new pet to the store
     * 
     * @return The call builder
     */
    public AddPetRequestBuilder addPet() {
        return new AddPetRequestBuilder(sdkConfiguration);
    }

    /**
     * Add a new pet to the store
     * 
     * <p>Add a new pet to the store
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AddPetResponse addPet(@Nonnull org.openapis.openapi.models.components.Pet request) throws Exception {
        RequestOperation<org.openapis.openapi.models.components.Pet, AddPetResponse> operation
              = new AddPet.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Finds Pets by status
     * 
     * <p>Multiple status values can be provided with comma separated strings
     * 
     * @return The call builder
     */
    public FindPetsByStatusRequestBuilder findPetsByStatus() {
        return new FindPetsByStatusRequestBuilder(sdkConfiguration);
    }

    /**
     * Finds Pets by status
     * 
     * <p>Multiple status values can be provided with comma separated strings
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public FindPetsByStatusResponse findPetsByStatusDirect() throws Exception {
        return findPetsByStatus(null);
    }

    /**
     * Finds Pets by status
     * 
     * <p>Multiple status values can be provided with comma separated strings
     * 
     * @param status Status values that need to be considered for filter
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public FindPetsByStatusResponse findPetsByStatus(@Nullable Status status) throws Exception {
        FindPetsByStatusRequest request = new FindPetsByStatusRequest(status);
        RequestOperation<FindPetsByStatusRequest, FindPetsByStatusResponse> operation
              = new FindPetsByStatus.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Finds Pets by tags
     * 
     * <p>Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
     * 
     * @return The call builder
     */
    public FindPetsByTagsRequestBuilder findPetsByTags() {
        return new FindPetsByTagsRequestBuilder(sdkConfiguration);
    }

    /**
     * Finds Pets by tags
     * 
     * <p>Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public FindPetsByTagsResponse findPetsByTagsDirect() throws Exception {
        return findPetsByTags(null);
    }

    /**
     * Finds Pets by tags
     * 
     * <p>Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
     * 
     * @param tags Tags to filter by
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public FindPetsByTagsResponse findPetsByTags(@Nullable List<String> tags) throws Exception {
        FindPetsByTagsRequest request = new FindPetsByTagsRequest(tags);
        RequestOperation<FindPetsByTagsRequest, FindPetsByTagsResponse> operation
              = new FindPetsByTags.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Find pet by ID
     * 
     * <p>Returns a single pet
     * 
     * @return The call builder
     */
    public GetPetByIdRequestBuilder getPetById() {
        return new GetPetByIdRequestBuilder(sdkConfiguration);
    }

    /**
     * Find pet by ID
     * 
     * <p>Returns a single pet
     * 
     * @param petId ID of pet to return
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetPetByIdResponse getPetById(long petId) throws Exception {
        GetPetByIdRequest request = new GetPetByIdRequest(petId);
        RequestOperation<GetPetByIdRequest, GetPetByIdResponse> operation
              = new GetPetById.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Deletes a pet
     * 
     * @return The call builder
     */
    public DeletePetRequestBuilder deletePet() {
        return new DeletePetRequestBuilder(sdkConfiguration);
    }

    /**
     * Deletes a pet
     * 
     * @param petId Pet id to delete
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeletePetResponse deletePet(long petId) throws Exception {
        return deletePet(null, petId);
    }

    /**
     * Deletes a pet
     * 
     * @param apiKey 
     * @param petId Pet id to delete
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeletePetResponse deletePet(@Nullable String apiKey, long petId) throws Exception {
        DeletePetRequest request = new DeletePetRequest(apiKey, petId);
        RequestOperation<DeletePetRequest, DeletePetResponse> operation
              = new DeletePet.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * uploads an image
     * 
     * @return The call builder
     */
    public UploadFileRequestBuilder uploadFile() {
        return new UploadFileRequestBuilder(sdkConfiguration);
    }

    /**
     * uploads an image
     * 
     * @param petId ID of pet to update
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UploadFileResponse uploadFile(long petId) throws Exception {
        return uploadFile(petId, null, null);
    }

    /**
     * uploads an image
     * 
     * @param petId ID of pet to update
     * @param additionalMetadata Additional Metadata
     * @param requestBody 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UploadFileResponse uploadFile(
            long petId, @Nullable String additionalMetadata,
            @Nullable byte[] requestBody) throws Exception {
        UploadFileRequest request = new UploadFileRequest(petId, additionalMetadata, requestBody);
        RequestOperation<UploadFileRequest, UploadFileResponse> operation
              = new UploadFile.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

}
